<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="Built_In_Display" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="latest" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="BLS_grid_and_square" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="Stimulus">
      <ImageComponent name="Grid">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Blank Grid.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Grid" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="polygon">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[255,0,0]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[255,0,0]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="polygon" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$location" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.15, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="Response"/>
    <Routine name="Resp_Rdy_Msg">
      <TextComponent name="rdy_msg">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="rdy_msg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Good work!&amp;#10;&amp;#10;Press SPACE to begin the next trial." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="Trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('Running_Trial_Num', 1), ('trial_length', 2), ('rows', '0, 1')]), OrderedDict([('Running_Trial_Num', 2), ('trial_length', 2), ('rows', '2, 3')]), OrderedDict([('Running_Trial_Num', 3), ('trial_length', 2), ('rows', '4, 5')]), OrderedDict([('Running_Trial_Num', 4), ('trial_length', 2), ('rows', '6, 7')]), OrderedDict([('Running_Trial_Num', 5), ('trial_length', 3), ('rows', '8, 9, 10')]), OrderedDict([('Running_Trial_Num', 6), ('trial_length', 3), ('rows', '11, 12, 13')]), OrderedDict([('Running_Trial_Num', 7), ('trial_length', 3), ('rows', '14, 15, 16')]), OrderedDict([('Running_Trial_Num', 8), ('trial_length', 3), ('rows', '17, 18, 19')]), OrderedDict([('Running_Trial_Num', 9), ('trial_length', 4), ('rows', '20, 21, 22, 23')]), OrderedDict([('Running_Trial_Num', 10), ('trial_length', 4), ('rows', '24, 25, 26, 27')]), OrderedDict([('Running_Trial_Num', 11), ('trial_length', 4), ('rows', '28, 29, 30, 31')]), OrderedDict([('Running_Trial_Num', 12), ('trial_length', 4), ('rows', '32, 33, 34, 35')]), OrderedDict([('Running_Trial_Num', 13), ('trial_length', 5), ('rows', '36, 37, 38, 39, 40')]), OrderedDict([('Running_Trial_Num', 14), ('trial_length', 5), ('rows', '41, 42, 43, 44, 45')]), OrderedDict([('Running_Trial_Num', 15), ('trial_length', 5), ('rows', '46, 47, 48, 49, 50')]), OrderedDict([('Running_Trial_Num', 16), ('trial_length', 5), ('rows', '51, 52, 53, 54, 55')]), OrderedDict([('Running_Trial_Num', 17), ('trial_length', 6), ('rows', '56, 57, 58, 59, 60, 61')]), OrderedDict([('Running_Trial_Num', 18), ('trial_length', 6), ('rows', '62, 63, 64, 65, 66, 67')]), OrderedDict([('Running_Trial_Num', 19), ('trial_length', 6), ('rows', '68, 69, 70, 71, 72, 73')]), OrderedDict([('Running_Trial_Num', 20), ('trial_length', 6), ('rows', '74, 75, 76, 77, 78, 79')]), OrderedDict([('Running_Trial_Num', 21), ('trial_length', 7), ('rows', '80, 81, 82, 83, 84, 85, 86')]), OrderedDict([('Running_Trial_Num', 22), ('trial_length', 7), ('rows', '87, 88, 89, 90, 91, 92, 93')]), OrderedDict([('Running_Trial_Num', 23), ('trial_length', 7), ('rows', '94, 95, 96, 97, 98, 99, 100')]), OrderedDict([('Running_Trial_Num', 24), ('trial_length', 7), ('rows', '101, 102, 103, 104, 105, 106, 107')]), OrderedDict([('Running_Trial_Num', 25), ('trial_length', 8), ('rows', '108, 109, 110, 111, 112, 113, 114, 115')]), OrderedDict([('Running_Trial_Num', 26), ('trial_length', 8), ('rows', '116, 117, 118, 119, 120, 121, 122, 123')]), OrderedDict([('Running_Trial_Num', 27), ('trial_length', 8), ('rows', '124, 125, 126, 127, 128, 129, 130, 131')]), OrderedDict([('Running_Trial_Num', 28), ('trial_length', 8), ('rows', '132, 133, 134, 135, 136, 137, 138, 139')]), OrderedDict([('Running_Trial_Num', 29), ('trial_length', 9), ('rows', '140, 141, 142, 143, 144, 145, 146, 147, 148')]), OrderedDict([('Running_Trial_Num', 30), ('trial_length', 9), ('rows', '149, 150, 151, 152, 153, 154, 155, 156, 157')]), OrderedDict([('Running_Trial_Num', 31), ('trial_length', 9), ('rows', '158, 159, 160, 161, 162, 163, 164, 165, 166')]), OrderedDict([('Running_Trial_Num', 32), ('trial_length', 9), ('rows', '167, 168, 169, 170, 171, 172, 173, 174, 175')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="BLS_Trial_Picker.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="Stimuli">
      <Param name="Selected rows" updates="None" val="$rows" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('span', 2), ('trial', 1), ('stimulus', 1), ('square', 10), ('location', [0.39, 0.195])]), OrderedDict([('span', 2), ('trial', 1), ('stimulus', 2), ('square', 18), ('location', [0, -0.195])]), OrderedDict([('span', 2), ('trial', 2), ('stimulus', 1), ('square', 2), ('location', [-0.195, 0.39])]), OrderedDict([('span', 2), ('trial', 2), ('stimulus', 2), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 2), ('trial', 3), ('stimulus', 1), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 2), ('trial', 3), ('stimulus', 2), ('square', 21), ('location', [-0.39, -0.39])]), OrderedDict([('span', 2), ('trial', 4), ('stimulus', 1), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 2), ('trial', 4), ('stimulus', 2), ('square', 3), ('location', [0, 0.39])]), OrderedDict([('span', 3), ('trial', 1), ('stimulus', 1), ('square', 9), ('location', [0.195, 0.195])]), OrderedDict([('span', 3), ('trial', 1), ('stimulus', 2), ('square', 5), ('location', [0.39, 0.39])]), OrderedDict([('span', 3), ('trial', 1), ('stimulus', 3), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 3), ('trial', 2), ('stimulus', 1), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 3), ('trial', 2), ('stimulus', 2), ('square', 24), ('location', [0.195, -0.39])]), OrderedDict([('span', 3), ('trial', 2), ('stimulus', 3), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 3), ('trial', 3), ('stimulus', 1), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 3), ('trial', 3), ('stimulus', 2), ('square', 13), ('location', [0, 0])]), OrderedDict([('span', 3), ('trial', 3), ('stimulus', 3), ('square', 20), ('location', [0.39, -0.195])]), OrderedDict([('span', 3), ('trial', 4), ('stimulus', 1), ('square', 25), ('location', [0.39, -0.39])]), OrderedDict([('span', 3), ('trial', 4), ('stimulus', 2), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 3), ('trial', 4), ('stimulus', 3), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 4), ('trial', 1), ('stimulus', 1), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 4), ('trial', 1), ('stimulus', 2), ('square', 12), ('location', [-0.195, 0])]), OrderedDict([('span', 4), ('trial', 1), ('stimulus', 3), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 4), ('trial', 1), ('stimulus', 4), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 4), ('trial', 2), ('stimulus', 1), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 4), ('trial', 2), ('stimulus', 2), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 4), ('trial', 2), ('stimulus', 3), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 4), ('trial', 2), ('stimulus', 4), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 4), ('trial', 3), ('stimulus', 1), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 4), ('trial', 3), ('stimulus', 2), ('square', 13), ('location', [0, 0])]), OrderedDict([('span', 4), ('trial', 3), ('stimulus', 3), ('square', 21), ('location', [-0.39, -0.39])]), OrderedDict([('span', 4), ('trial', 3), ('stimulus', 4), ('square', 9), ('location', [0.195, 0.195])]), OrderedDict([('span', 4), ('trial', 4), ('stimulus', 1), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 4), ('trial', 4), ('stimulus', 2), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 4), ('trial', 4), ('stimulus', 3), ('square', 24), ('location', [0.195, -0.39])]), OrderedDict([('span', 4), ('trial', 4), ('stimulus', 4), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 5), ('trial', 1), ('stimulus', 1), ('square', 3), ('location', [0, 0.39])]), OrderedDict([('span', 5), ('trial', 1), ('stimulus', 2), ('square', 25), ('location', [0.39, -0.39])]), OrderedDict([('span', 5), ('trial', 1), ('stimulus', 3), ('square', 6), ('location', [-0.39, 0.195])]), OrderedDict([('span', 5), ('trial', 1), ('stimulus', 4), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 5), ('trial', 1), ('stimulus', 5), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 5), ('trial', 2), ('stimulus', 1), ('square', 5), ('location', [0.39, 0.39])]), OrderedDict([('span', 5), ('trial', 2), ('stimulus', 2), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 5), ('trial', 2), ('stimulus', 3), ('square', 20), ('location', [0.39, -0.195])]), OrderedDict([('span', 5), ('trial', 2), ('stimulus', 4), ('square', 12), ('location', [-0.195, 0])]), OrderedDict([('span', 5), ('trial', 2), ('stimulus', 5), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 5), ('trial', 3), ('stimulus', 1), ('square', 2), ('location', [-0.195, 0.39])]), OrderedDict([('span', 5), ('trial', 3), ('stimulus', 2), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 5), ('trial', 3), ('stimulus', 3), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 5), ('trial', 3), ('stimulus', 4), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 5), ('trial', 3), ('stimulus', 5), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 5), ('trial', 4), ('stimulus', 1), ('square', 20), ('location', [0.39, -0.195])]), OrderedDict([('span', 5), ('trial', 4), ('stimulus', 2), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 5), ('trial', 4), ('stimulus', 3), ('square', 13), ('location', [0, 0])]), OrderedDict([('span', 5), ('trial', 4), ('stimulus', 4), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 5), ('trial', 4), ('stimulus', 5), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 6), ('trial', 1), ('stimulus', 1), ('square', 10), ('location', [0.39, 0.195])]), OrderedDict([('span', 6), ('trial', 1), ('stimulus', 2), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 6), ('trial', 1), ('stimulus', 3), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 6), ('trial', 1), ('stimulus', 4), ('square', 13), ('location', [0, 0])]), OrderedDict([('span', 6), ('trial', 1), ('stimulus', 5), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 6), ('trial', 1), ('stimulus', 6), ('square', 5), ('location', [0.39, 0.39])]), OrderedDict([('span', 6), ('trial', 2), ('stimulus', 1), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 6), ('trial', 2), ('stimulus', 2), ('square', 24), ('location', [0.195, -0.39])]), OrderedDict([('span', 6), ('trial', 2), ('stimulus', 3), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 6), ('trial', 2), ('stimulus', 4), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 6), ('trial', 2), ('stimulus', 5), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 6), ('trial', 2), ('stimulus', 6), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 6), ('trial', 3), ('stimulus', 1), ('square', 21), ('location', [-0.39, -0.39])]), OrderedDict([('span', 6), ('trial', 3), ('stimulus', 2), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 6), ('trial', 3), ('stimulus', 3), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 6), ('trial', 3), ('stimulus', 4), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 6), ('trial', 3), ('stimulus', 5), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 6), ('trial', 3), ('stimulus', 6), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 6), ('trial', 4), ('stimulus', 1), ('square', 12), ('location', [-0.195, 0])]), OrderedDict([('span', 6), ('trial', 4), ('stimulus', 2), ('square', 6), ('location', [-0.39, 0.195])]), OrderedDict([('span', 6), ('trial', 4), ('stimulus', 3), ('square', 2), ('location', [-0.195, 0.39])]), OrderedDict([('span', 6), ('trial', 4), ('stimulus', 4), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 6), ('trial', 4), ('stimulus', 5), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 6), ('trial', 4), ('stimulus', 6), ('square', 18), ('location', [0, -0.195])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 1), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 2), ('square', 21), ('location', [-0.39, -0.39])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 3), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 4), ('square', 2), ('location', [-0.195, 0.39])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 5), ('square', 12), ('location', [-0.195, 0])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 6), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 7), ('trial', 1), ('stimulus', 7), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 1), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 2), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 3), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 4), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 5), ('square', 20), ('location', [0.39, -0.195])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 6), ('square', 9), ('location', [0.195, 0.195])]), OrderedDict([('span', 7), ('trial', 2), ('stimulus', 7), ('square', 10), ('location', [0.39, 0.195])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 1), ('square', 5), ('location', [0.39, 0.39])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 2), ('square', 18), ('location', [0, -0.195])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 3), ('square', 24), ('location', [0.39, -0.39])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 4), ('square', 25), ('location', [0, 0])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 5), ('square', 13), ('location', [-0.195, -0.39])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 6), ('square', 22), ('location', [-0.39, 0.195])]), OrderedDict([('span', 7), ('trial', 3), ('stimulus', 7), ('square', 6), ('location', [-0.39, 0.195])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 1), ('square', 3), ('location', [0, 0.39])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 2), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 3), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 4), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 5), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 6), ('square', 6), ('location', [-0.39, 0.195])]), OrderedDict([('span', 7), ('trial', 4), ('stimulus', 7), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 1), ('square', 13), ('location', [0, 0])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 2), ('square', 21), ('location', [-0.39, -0.39])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 3), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 4), ('square', 5), ('location', [0.39, 0.39])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 5), ('square', 18), ('location', [0, -0.195])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 6), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 7), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 8), ('trial', 1), ('stimulus', 8), ('square', 9), ('location', [0.195, 0.195])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 1), ('square', 25), ('location', [0.39, -0.39])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 2), ('square', 24), ('location', [0.195, -0.39])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 3), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 4), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 5), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 6), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 7), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 8), ('trial', 2), ('stimulus', 8), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 1), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 2), ('square', 10), ('location', [0.39, 0.195])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 3), ('square', 20), ('location', [0.39, -0.195])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 4), ('square', 2), ('location', [-0.195, 0.39])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 5), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 6), ('square', 12), ('location', [-0.195, 0])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 7), ('square', 3), ('location', [0, 0.39])]), OrderedDict([('span', 8), ('trial', 3), ('stimulus', 8), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 1), ('square', 11), ('location', [-0.39, 0])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 2), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 3), ('square', 21), ('location', [-0.39, -0.39])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 4), ('square', 9), ('location', [0.195, 0.195])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 5), ('square', 12), ('location', [-0.195, 0])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 6), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 7), ('square', 6), ('location', [-0.39, 0.195])]), OrderedDict([('span', 8), ('trial', 4), ('stimulus', 8), ('square', 25), ('location', [0.39, -0.39])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 1), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 2), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 3), ('square', 2), ('location', [-0.195, 0.39])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 4), ('square', 3), ('location', [0, 0.39])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 5), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 6), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 7), ('square', 13), ('location', [0, 0])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 8), ('square', 18), ('location', [0, -0.195])]), OrderedDict([('span', 9), ('trial', 1), ('stimulus', 9), ('square', 1), ('location', [-0.39, 0.39])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 1), ('square', 5), ('location', [0.39, 0.39])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 2), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 3), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 4), ('square', 10), ('location', [0.39, 0.195])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 5), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 6), ('square', 20), ('location', [0.39, -0.195])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 7), ('square', 24), ('location', [0.195, -0.39])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 8), ('square', 14), ('location', [0.195, 0])]), OrderedDict([('span', 9), ('trial', 2), ('stimulus', 9), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 1), ('square', 19), ('location', [0.195, -0.195])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 2), ('square', 18), ('location', [0, -0.195])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 3), ('square', 10), ('location', [0, 0])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 4), ('square', 13), ('location', [-0.39, 0.39])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 5), ('square', 1), ('location', [-0.39, 0.195])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 6), ('square', 6), ('location', [0.39, -0.195])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 7), ('square', 20), ('location', [0.39, 0.39])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 8), ('square', 5), ('location', [0, -0.39])]), OrderedDict([('span', 9), ('trial', 3), ('stimulus', 9), ('square', 23), ('location', [0, -0.39])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 1), ('square', 7), ('location', [-0.195, 0.195])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 2), ('square', 16), ('location', [-0.39, -0.195])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 3), ('square', 17), ('location', [-0.195, -0.195])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 4), ('square', 4), ('location', [0.195, 0.39])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 5), ('square', 15), ('location', [0.39, 0])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 6), ('square', 22), ('location', [-0.195, -0.39])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 7), ('square', 8), ('location', [0, 0.195])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 8), ('square', 24), ('location', [0.195, -0.39])]), OrderedDict([('span', 9), ('trial', 4), ('stimulus', 9), ('square', 25), ('location', [0.39, -0.39])])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="BLS_Trial_List.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="Stimuli" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Stimulus"/>
    <LoopTerminator name="Stimuli"/>
    <Routine name="Resp_Rdy_Msg"/>
    <LoopTerminator name="Trials"/>
  </Flow>
</PsychoPy2experiment>
